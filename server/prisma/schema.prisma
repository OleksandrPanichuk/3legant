// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
}

model User {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  name     String
  username String @unique
  email    String @unique
  hash     String @db.Text

  hashedRt String? @db.Text

  avatar Avatar?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role    UserRole @default(CUSTOMER)
  reviews Review[]
}

model Avatar {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  url String @db.Text
  key String @db.Text

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

model Product {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  title        String
  description  String
  price        Decimal
  measurements String

  status ProductStatus @default(DRAFT)

  info       ProductInfo?
  images     ProductImage[]
  categories Category[]
  rewiews    Review[]
  colors     ProductColor[]

  createdAt DateTime @default(now())
  cart      Cart[]
}

enum ProductStatus {
  VISIBLE
  HIDDEN
  DRAFT
}

model ProductInfo {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @db.Uuid

  details  String  @db.Text
  width    Decimal
  height   Decimal
  length   Decimal
  weight   Decimal
  packages Int

  @@index([productId])
}

model ProductImage {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  url String @db.Text
  key String @db.Text

  isPreview Boolean @default(false)

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid

  @@index([productId])
}

model ProductColor {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  image ProductColorImage?
  name  String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.Uuid

  cart Cart[]

  @@index([productId])
}

model ProductColorImage {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  url String @db.Text
  key String @db.Text

  color   ProductColor @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId String       @unique @db.Uuid
}

model Category {
  id   String @id @default(uuid()) @map("_id") @db.Uuid
  name String

  products Product[]
}

model Review {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  content String
  rating  Decimal

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.Uuid

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.Uuid

  replyToId String?  @db.Uuid
  replyTo   Review?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Review[] @relation("ReplyTo")

  createdAr DateTime @default(now())

  @@index([productId])
  @@index([authorId])
  @@index([replyToId])
}

model Cart {
  id String @id @default(uuid()) @map("_id") @db.Uuid

  quantity Int
  color    ProductColor @relation(fields: [colorId], references: [id])
  colorId  String       @db.Uuid

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.Uuid

  @@index([colorId])
  @@index([productId])
}
